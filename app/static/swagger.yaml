
swagger: '2.0'
info:
  title: "Mechanics shop API"
  description: "Used to manage everday functionalites of a Mechanic shop"
  version: "0.0.1"

host: "127.0.0.1:5000" #During Development my API is served on my local host (will change when going to prod)
schemes:
  - "http"
consumes:
  - "application/json" # My API recieves json data
produces:
  - "application/json" # and Here produces a json data


paths: #Information about the routes 
 
  /mechanics/login: #writing out the endpoint URL thats lisitng in postman (the link / whats at the end of the localhost)
    post: #Request type (post,get,put or delete) where the infomatition is gettiong pulled from
      tags: #whatever gets tagged they will pop up under here
        - mechanics #adds route to a category
      summary: "Login endpoint (Generates a token)" # information about the endpoint (loging in gets you your token)
      description: "Validates mechanics credntials (email and password), and produces a specific token for the mechanic who is getting/ being logged in" #more in-depth information about the endpoint
      parameters: #not all will have a parameter such as Get requests. only when reciecing a body parameter, path parameter, query parameter thats when to add a paramter informtion to the request (info about data being sent! dont forget the s in parameters)
        - in: "body" #where will the info being pulled from/coming from
          name: "body"
          description: "Login Credntials" #whats being sent
          required: true #just lisiting that it will be required 
          schema:
            $ref: "#/definitions/LoginCredentials" #should show that this  is whats being referred  data 
      responses:
        200: #lisiting any response you could recieve 
          description: "Login Successful"
          schema: 
            $ref: "#/definitions/LoginResponse"
          examples: #example of what its going to look like
          application/json:
            message: "successfully logged in."
            status: "successful"
            token: "ex1eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...."

/Mechanics: 
  post:
    tags:
    - Mechanics
    summary: "Register Mechanic"
    description: "Send in user info, to create auser profile that will be stored in the data base. DOB and address are opption fields. "
    parameters:
      - in: "body"
        name: "body"
        description: "New Mechanic Information"
        required: true
        schema:
          $ref: "#/definitions/MechanicInput"
    responses:
      201:
        description: "Creation Successful"
        schema:
          $ref: "#/definitions/MechanicResponse"
        examples:
          application/json:
            DOB: "1900-91-01"
            address: "123 Example St."
            email: "test@test1.com"
            id: 0
            password: "Test1"
            first_name: "tester"
            last_name: "Work"





    
definitions: # Information about the shape of the input and output json 

  LoginCredentials: #Input data required for kogin route
    type: object #what has to get sent to login 
    properties:
      email: 
        type: string
      password:
        type: string 

    required:
      - email
      - password 
  
  LoginResponse: #reciting down the response giving from the body of the terminal of postman from login enpoint(after loging in)
    type: object
    properties: 
      message:
        type: string
      status: 
        type: string
      token:
        type: string

  MechanicInput:
    type: object
    properties:
      DOB:
        type: string
      address:
        type: string
      email: 
        type: string
      first_name:
        type: string
      id:
        type: int
      last_name:
        type: string
      password:
        type: string 
      salary:
        type: float
    
    required:
      - DOB
      - address 
      - email
      - first_name
      - id
      - last_name
      - password
      - salary
    

  MechanicResponse:
    type: object 
    properties:
      DOB:
        type: string
      address:
        type: string
      email: 
        type: string
      first_name:
        type: string
      id:
        type: int
      last_name:
        type: string
      password:
        type: string 
      salary:
        type: float
