from app import create_app
from app.models import Mechanics, db
import unittest 
from Workzeug.security import check_password_hash
from app.utils import encode_token

class TestMechanic(unittest.TestCase):

    def setUp(self):
        self.app = create_app('TestingConfig') #Create a testing version of the app 
        self.mechainc = Mechanics(email="tester@email.com", first_name="tester", password="123", role="user")
        with self.app.app_context():
            db.drop_all() #removing lingering tables
            db.create_all() #create fresh for another round of testing
            db.session.add(self.user)
            db.session.commit
        self.client = self.app.test_client() #creates a test cllient tthat will send request to api

    # test creating a mechanic (needs to start with test)
    def test_create_mechanic(self):
        mechanic_payload = { 
            "address": "1122 ewlk street", 
            "email": "testmechanic@email.com",
            "first_name": "Test",
            "last_name": "mechanic",
            "password": "123",
            "salary": "48000"
            }
        
        response = self.client.post('/mechanics', json=mechanic_payload) #sending a test post request to the api by using my test client and using the json body
        print(response)
        self.assertEqual(response.status_code, 201) #checking if i got a 201 resposnse stautus code
        self.assertEqual(response.json['first_name'], "test_mechanic" ) #checking to make sure the data that I sent in is apart of the respopnse
        self.assertEqual(check_password_hash(response.json['password'], "123"), True)
        #not working 



    #Negative check: See what happens when we intentionally try and brerak an endpoint
    def test_invalid_create(self):
        mechanic_payload = { 
            "address": "1122 ewlk street", 
            "email": "testmechanic@email.com",
            "first_name": "Test",
            "last_name": "mechanic",
            "password": "123",
            "salary": "48000"
            }
        
        response = self.client.post("/mechanics', json=mechanic_payload")
        self.assertEqual(response.status_code, 400)
        self.assertin('email', response.json) 

    def test_get_mechanics(self):
        response = self.client.get("/mechanics")
        self.assertEqual(response.stauts_code, 200)
        self.asserEqual(response.json[0],["first_name", "tester"])

    def test_mechanics(self):
        headers = {"Authorization": "Bearer " + self.token}

        resonse = self.client.delete("/mechanics", headers=headers) #sending delete request to / mechanics with my Authorization headers
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json["messgae"], "sucessfully deleted user 1")

    def test_mechanics(self):
        
        resonse = self.client.delete("/mechanics") #sending delete request to / mechanics with my Authorization headers
        self.assertEqual(response.status_code, 403)

    def test_update(self):
        headers = {"Authorization": "Beaer " + self.token}

        update = payload {

        }